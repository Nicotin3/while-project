/*
 * generated by Xtext 2.13.0
 */
package org.xtext.whpp.mydsl.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.whpp.mydsl.ide.contentassist.antlr.internal.InternalWhParser;
import org.xtext.whpp.mydsl.services.WhGrammarAccess;

public class WhParser extends AbstractContentAssistParser {

	@Inject
	private WhGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalWhParser createParser() {
		InternalWhParser result = new InternalWhParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getInputAccess().getAlternatives(), "rule__Input__Alternatives");
					put(grammarAccess.getOutputAccess().getAlternatives(), "rule__Output__Alternatives");
					put(grammarAccess.getCommandsAccess().getAlternatives(), "rule__Commands__Alternatives");
					put(grammarAccess.getProgramAccess().getGroup(), "rule__Program__Group__0");
					put(grammarAccess.getFunctionAccess().getGroup(), "rule__Function__Group__0");
					put(grammarAccess.getDefinitionAccess().getGroup(), "rule__Definition__Group__0");
					put(grammarAccess.getDefinitionAccess().getGroup_0(), "rule__Definition__Group_0__0");
					put(grammarAccess.getDefinitionAccess().getGroup_1(), "rule__Definition__Group_1__0");
					put(grammarAccess.getDefinitionAccess().getGroup_2(), "rule__Definition__Group_2__0");
					put(grammarAccess.getInputAccess().getGroup_0(), "rule__Input__Group_0__0");
					put(grammarAccess.getOutputAccess().getGroup_0(), "rule__Output__Group_0__0");
					put(grammarAccess.getCommandsAccess().getGroup_0(), "rule__Commands__Group_0__0");
					put(grammarAccess.getModelAccess().getProgramAssignment(), "rule__Model__ProgramAssignment");
					put(grammarAccess.getProgramAccess().getFunctionAssignment_0(), "rule__Program__FunctionAssignment_0");
					put(grammarAccess.getProgramAccess().getProgramAssignment_2(), "rule__Program__ProgramAssignment_2");
					put(grammarAccess.getFunctionAccess().getNameAssignment_1(), "rule__Function__NameAssignment_1");
					put(grammarAccess.getFunctionAccess().getDefinitionAssignment_3(), "rule__Function__DefinitionAssignment_3");
					put(grammarAccess.getDefinitionAccess().getInputAssignment_0_1(), "rule__Definition__InputAssignment_0_1");
					put(grammarAccess.getDefinitionAccess().getCommandsAssignment_1_1(), "rule__Definition__CommandsAssignment_1_1");
					put(grammarAccess.getDefinitionAccess().getOutputAssignment_2_2(), "rule__Definition__OutputAssignment_2_2");
					put(grammarAccess.getInputAccess().getVariableAssignment_0_0(), "rule__Input__VariableAssignment_0_0");
					put(grammarAccess.getInputAccess().getInputAssignment_0_2(), "rule__Input__InputAssignment_0_2");
					put(grammarAccess.getInputAccess().getVariableAssignment_1(), "rule__Input__VariableAssignment_1");
					put(grammarAccess.getOutputAccess().getVariableAssignment_0_0(), "rule__Output__VariableAssignment_0_0");
					put(grammarAccess.getOutputAccess().getOutputAssignment_0_2(), "rule__Output__OutputAssignment_0_2");
					put(grammarAccess.getOutputAccess().getVariableAssignment_1(), "rule__Output__VariableAssignment_1");
					put(grammarAccess.getCommandsAccess().getCommandAssignment_0_0(), "rule__Commands__CommandAssignment_0_0");
					put(grammarAccess.getCommandsAccess().getCommandsAssignment_0_2(), "rule__Commands__CommandsAssignment_0_2");
					put(grammarAccess.getCommandsAccess().getCommandAssignment_1(), "rule__Commands__CommandAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS" };
	}

	public WhGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(WhGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
