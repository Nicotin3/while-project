/*
 * generated by Xtext 2.13.0
 */
grammar InternalWh;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.whpp.mydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.whpp.mydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.whpp.mydsl.services.WhGrammarAccess;

}
@parser::members {
	private WhGrammarAccess grammarAccess;

	public void setGrammarAccess(WhGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getProgramAssignment()); }
		(rule__Model__ProgramAssignment)
		{ after(grammarAccess.getModelAccess().getProgramAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProgram
entryRuleProgram
:
{ before(grammarAccess.getProgramRule()); }
	 ruleProgram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule Program
ruleProgram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProgramAccess().getGroup()); }
		(rule__Program__Group__0)
		{ after(grammarAccess.getProgramAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunction
entryRuleFunction
:
{ before(grammarAccess.getFunctionRule()); }
	 ruleFunction
{ after(grammarAccess.getFunctionRule()); } 
	 EOF 
;

// Rule Function
ruleFunction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionAccess().getGroup()); }
		(rule__Function__Group__0)
		{ after(grammarAccess.getFunctionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDefinition
entryRuleDefinition
:
{ before(grammarAccess.getDefinitionRule()); }
	 ruleDefinition
{ after(grammarAccess.getDefinitionRule()); } 
	 EOF 
;

// Rule Definition
ruleDefinition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDefinitionAccess().getGroup()); }
		(rule__Definition__Group__0)
		{ after(grammarAccess.getDefinitionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInput
entryRuleInput
:
{ before(grammarAccess.getInputRule()); }
	 ruleInput
{ after(grammarAccess.getInputRule()); } 
	 EOF 
;

// Rule Input
ruleInput 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInputAccess().getAlternatives()); }
		(rule__Input__Alternatives)
		{ after(grammarAccess.getInputAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOutput
entryRuleOutput
:
{ before(grammarAccess.getOutputRule()); }
	 ruleOutput
{ after(grammarAccess.getOutputRule()); } 
	 EOF 
;

// Rule Output
ruleOutput 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOutputAccess().getAlternatives()); }
		(rule__Output__Alternatives)
		{ after(grammarAccess.getOutputAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariable
entryRuleVariable
:
{ before(grammarAccess.getVariableRule()); }
	 ruleVariable
{ after(grammarAccess.getVariableRule()); } 
	 EOF 
;

// Rule Variable
ruleVariable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableAccess().getMAJUSCULETerminalRuleCall()); }
		RULE_MAJUSCULE
		{ after(grammarAccess.getVariableAccess().getMAJUSCULETerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCommands
entryRuleCommands
:
{ before(grammarAccess.getCommandsRule()); }
	 ruleCommands
{ after(grammarAccess.getCommandsRule()); } 
	 EOF 
;

// Rule Commands
ruleCommands 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCommandsAccess().getAlternatives()); }
		(rule__Commands__Alternatives)
		{ after(grammarAccess.getCommandsAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCommand
entryRuleCommand
:
{ before(grammarAccess.getCommandRule()); }
	 ruleCommand
{ after(grammarAccess.getCommandRule()); } 
	 EOF 
;

// Rule Command
ruleCommand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCommandAccess().getNopKeyword()); }
		'nop'
		{ after(grammarAccess.getCommandAccess().getNopKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInputAccess().getGroup_0()); }
		(rule__Input__Group_0__0)
		{ after(grammarAccess.getInputAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getInputAccess().getVariableAssignment_1()); }
		(rule__Input__VariableAssignment_1)
		{ after(grammarAccess.getInputAccess().getVariableAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOutputAccess().getGroup_0()); }
		(rule__Output__Group_0__0)
		{ after(grammarAccess.getOutputAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getOutputAccess().getVariableAssignment_1()); }
		(rule__Output__VariableAssignment_1)
		{ after(grammarAccess.getOutputAccess().getVariableAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Commands__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandsAccess().getGroup_0()); }
		(rule__Commands__Group_0__0)
		{ after(grammarAccess.getCommandsAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getCommandsAccess().getCommandAssignment_1()); }
		(rule__Commands__CommandAssignment_1)
		{ after(grammarAccess.getCommandsAccess().getCommandAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__0__Impl
	rule__Program__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getFunctionAssignment_0()); }
	(rule__Program__FunctionAssignment_0)
	{ after(grammarAccess.getProgramAccess().getFunctionAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__1__Impl
	rule__Program__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getProgramAccess().getLineFeedKeyword_1()); }
		('\n')
		{ after(grammarAccess.getProgramAccess().getLineFeedKeyword_1()); }
	)
	(
		{ before(grammarAccess.getProgramAccess().getLineFeedKeyword_1()); }
		('\n')*
		{ after(grammarAccess.getProgramAccess().getLineFeedKeyword_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getProgramAssignment_2()); }
	(rule__Program__ProgramAssignment_2)?
	{ after(grammarAccess.getProgramAccess().getProgramAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__0__Impl
	rule__Function__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getFunctionKeyword_0()); }
	'function'
	{ after(grammarAccess.getFunctionAccess().getFunctionKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__1__Impl
	rule__Function__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getNameAssignment_1()); }
	(rule__Function__NameAssignment_1)
	{ after(grammarAccess.getFunctionAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__2__Impl
	rule__Function__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getFunctionAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getDefinitionAssignment_3()); }
	(rule__Function__DefinitionAssignment_3)
	{ after(grammarAccess.getFunctionAccess().getDefinitionAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Definition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group__0__Impl
	rule__Definition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getGroup_0()); }
	(rule__Definition__Group_0__0)
	{ after(grammarAccess.getDefinitionAccess().getGroup_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group__1__Impl
	rule__Definition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getGroup_1()); }
	(rule__Definition__Group_1__0)
	{ after(grammarAccess.getDefinitionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getGroup_2()); }
	(rule__Definition__Group_2__0)
	{ after(grammarAccess.getDefinitionAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Definition__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group_0__0__Impl
	rule__Definition__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getReadKeyword_0_0()); }
	'read'
	{ after(grammarAccess.getDefinitionAccess().getReadKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getInputAssignment_0_1()); }
	(rule__Definition__InputAssignment_0_1)
	{ after(grammarAccess.getDefinitionAccess().getInputAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Definition__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group_1__0__Impl
	rule__Definition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getPercentSignKeyword_1_0()); }
	'%'
	{ after(grammarAccess.getDefinitionAccess().getPercentSignKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getCommandsAssignment_1_1()); }
	(rule__Definition__CommandsAssignment_1_1)
	{ after(grammarAccess.getDefinitionAccess().getCommandsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Definition__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group_2__0__Impl
	rule__Definition__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getPercentSignKeyword_2_0()); }
	'%'
	{ after(grammarAccess.getDefinitionAccess().getPercentSignKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group_2__1__Impl
	rule__Definition__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getWriteKeyword_2_1()); }
	'write'
	{ after(grammarAccess.getDefinitionAccess().getWriteKeyword_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getOutputAssignment_2_2()); }
	(rule__Definition__OutputAssignment_2_2)
	{ after(grammarAccess.getDefinitionAccess().getOutputAssignment_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Input__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Input__Group_0__0__Impl
	rule__Input__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputAccess().getVariableAssignment_0_0()); }
	(rule__Input__VariableAssignment_0_0)
	{ after(grammarAccess.getInputAccess().getVariableAssignment_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Input__Group_0__1__Impl
	rule__Input__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputAccess().getCommaKeyword_0_1()); }
	','
	{ after(grammarAccess.getInputAccess().getCommaKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Input__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputAccess().getInputAssignment_0_2()); }
	(rule__Input__InputAssignment_0_2)
	{ after(grammarAccess.getInputAccess().getInputAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Output__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Output__Group_0__0__Impl
	rule__Output__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputAccess().getVariableAssignment_0_0()); }
	(rule__Output__VariableAssignment_0_0)
	{ after(grammarAccess.getOutputAccess().getVariableAssignment_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Output__Group_0__1__Impl
	rule__Output__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputAccess().getCommaKeyword_0_1()); }
	','
	{ after(grammarAccess.getOutputAccess().getCommaKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Output__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputAccess().getOutputAssignment_0_2()); }
	(rule__Output__OutputAssignment_0_2)
	{ after(grammarAccess.getOutputAccess().getOutputAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Commands__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Commands__Group_0__0__Impl
	rule__Commands__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Commands__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandsAccess().getCommandAssignment_0_0()); }
	(rule__Commands__CommandAssignment_0_0)
	{ after(grammarAccess.getCommandsAccess().getCommandAssignment_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Commands__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Commands__Group_0__1__Impl
	rule__Commands__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Commands__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandsAccess().getSemicolonKeyword_0_1()); }
	';'
	{ after(grammarAccess.getCommandsAccess().getSemicolonKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Commands__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Commands__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Commands__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandsAccess().getCommandsAssignment_0_2()); }
	(rule__Commands__CommandsAssignment_0_2)
	{ after(grammarAccess.getCommandsAccess().getCommandsAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__ProgramAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getProgramProgramParserRuleCall_0()); }
		ruleProgram
		{ after(grammarAccess.getModelAccess().getProgramProgramParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__FunctionAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getFunctionFunctionParserRuleCall_0_0()); }
		ruleFunction
		{ after(grammarAccess.getProgramAccess().getFunctionFunctionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__ProgramAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getProgramProgramParserRuleCall_2_0()); }
		ruleProgram
		{ after(grammarAccess.getProgramAccess().getProgramProgramParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__DefinitionAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getDefinitionDefinitionParserRuleCall_3_0()); }
		ruleDefinition
		{ after(grammarAccess.getFunctionAccess().getDefinitionDefinitionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__InputAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefinitionAccess().getInputInputParserRuleCall_0_1_0()); }
		ruleInput
		{ after(grammarAccess.getDefinitionAccess().getInputInputParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__CommandsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefinitionAccess().getCommandsCommandsParserRuleCall_1_1_0()); }
		ruleCommands
		{ after(grammarAccess.getDefinitionAccess().getCommandsCommandsParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__OutputAssignment_2_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefinitionAccess().getOutputOutputParserRuleCall_2_2_0()); }
		ruleOutput
		{ after(grammarAccess.getDefinitionAccess().getOutputOutputParserRuleCall_2_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__VariableAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInputAccess().getVariableVariableParserRuleCall_0_0_0()); }
		ruleVariable
		{ after(grammarAccess.getInputAccess().getVariableVariableParserRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__InputAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInputAccess().getInputInputParserRuleCall_0_2_0()); }
		ruleInput
		{ after(grammarAccess.getInputAccess().getInputInputParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__VariableAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInputAccess().getVariableVariableParserRuleCall_1_0()); }
		ruleVariable
		{ after(grammarAccess.getInputAccess().getVariableVariableParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__VariableAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOutputAccess().getVariableVariableParserRuleCall_0_0_0()); }
		ruleVariable
		{ after(grammarAccess.getOutputAccess().getVariableVariableParserRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__OutputAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOutputAccess().getOutputOutputParserRuleCall_0_2_0()); }
		ruleOutput
		{ after(grammarAccess.getOutputAccess().getOutputOutputParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__VariableAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOutputAccess().getVariableVariableParserRuleCall_1_0()); }
		ruleVariable
		{ after(grammarAccess.getOutputAccess().getVariableVariableParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Commands__CommandAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandsAccess().getCommandCommandParserRuleCall_0_0_0()); }
		ruleCommand
		{ after(grammarAccess.getCommandsAccess().getCommandCommandParserRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Commands__CommandsAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandsAccess().getCommandsCommandsParserRuleCall_0_2_0()); }
		ruleCommands
		{ after(grammarAccess.getCommandsAccess().getCommandsCommandsParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Commands__CommandAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandsAccess().getCommandCommandParserRuleCall_1_0()); }
		ruleCommand
		{ after(grammarAccess.getCommandsAccess().getCommandCommandParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_MAJUSCULE : 'A'..'Z';

RULE_MINUSCULE : 'a'..'z';

RULE_DIGIT : '0'..'9';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
