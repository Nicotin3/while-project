grammar org.xtext.whpp.mydsl.Wh with org.eclipse.xtext.common.Terminals

generate wh "http://www.xtext.org/whpp/mydsl/Wh"

Model:
	(functions+=Function)*
;

Function:
	'function' name=ID ':' definition=Definition 
;

Definition:
	('read' input=Input)
	('%' commands=Commands)
	('%''write' output=Output)
;

Input:
	variables=Variables
;

Output:
	variables=Variables
;

Variables:
	variables+=Variable (',' variables+=Variable)*	
;

Variable:
	MAJUSCULE // base
	// confort
	//(MAJUSCULE | MINUSCULE | DIGIT)* 
	//(('-' | '+' | '.' | '/' | '_' | '&' | '->') (MAJUSCULE | MINUSCULE | DIGIT)+)* ('?'|'!')
;

Commands:
	commands+=Command (';' commands+=Command)*
;

Command:
	command='nop' | variables=Variables command=':=' 'Exprs' | command='while' 'Expr' 'do' commands=Commands 'od'| command='for' 'Expr' 'do' commands=Commands 'od' 
	| command='if' 'Expr' 'then' commands_then=Commands 'else' commands_else=Commands 'fi'
;
/*
Exprs:
	Expr ',' Exprs | Expr

Expr:
	exrp=ExprSimple | expr=ExprAnd
;

ExprSimple:
	'nil' | Variable | MINUSCULE | '(' 'cons' LExpr ')' | '(' 'list' LExpr ')' | '(' 'hd' Expr ')' | '(' 'tl' Expr ')' | '(' MINUSCULE LExpr ')'
;

LExpr:
	expr=Expr lexpr=LExpr
;

ExprAnd:
	exprOr=ExprOr 'and' exrpAnd=ExprAnd | exprOr=ExprOr
;

ExprOr:
	exprNot=ExprNot	'or' exprOr=ExprOr	| exprNot=ExprNot
;

ExprNot:
	'not' exprEq=ExprEq | exprEq=ExprEq
;

ExprEq:
	expr1=ExprSimple '=?' expr2=ExprSimple | '(' expr=Expr ')'
;*/

terminal MAJUSCULE:
	('A'..'Z')
;

terminal MINUSCULE:
	('a'..'z')
;

terminal DIGIT:
	('0'..'9')
;
