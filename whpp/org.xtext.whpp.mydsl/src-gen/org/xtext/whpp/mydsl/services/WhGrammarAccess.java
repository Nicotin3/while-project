/*
 * generated by Xtext 2.13.0
 */
package org.xtext.whpp.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class WhGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.whpp.mydsl.Wh.Model");
		private final Assignment cProgramAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cProgramProgramParserRuleCall_0 = (RuleCall)cProgramAssignment.eContents().get(0);
		
		//Model:
		//	program+=Program;
		@Override public ParserRule getRule() { return rule; }
		
		//program+=Program
		public Assignment getProgramAssignment() { return cProgramAssignment; }
		
		//Program
		public RuleCall getProgramProgramParserRuleCall_0() { return cProgramProgramParserRuleCall_0; }
	}
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.whpp.mydsl.Wh.Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFunctionFunctionParserRuleCall_0_0 = (RuleCall)cFunctionAssignment_0.eContents().get(0);
		private final Keyword cLineFeedKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cProgramAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cProgramProgramParserRuleCall_2_0 = (RuleCall)cProgramAssignment_2.eContents().get(0);
		
		//Program:
		//	function=Function '
		//'+ program=Program?;
		@Override public ParserRule getRule() { return rule; }
		
		//function=Function '
		//'+ program=Program?
		public Group getGroup() { return cGroup; }
		
		//function=Function
		public Assignment getFunctionAssignment_0() { return cFunctionAssignment_0; }
		
		//Function
		public RuleCall getFunctionFunctionParserRuleCall_0_0() { return cFunctionFunctionParserRuleCall_0_0; }
		
		//'
		//'+
		public Keyword getLineFeedKeyword_1() { return cLineFeedKeyword_1; }
		
		//program=Program?
		public Assignment getProgramAssignment_2() { return cProgramAssignment_2; }
		
		//Program
		public RuleCall getProgramProgramParserRuleCall_2_0() { return cProgramProgramParserRuleCall_2_0; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.whpp.mydsl.Wh.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDefinitionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDefinitionDefinitionParserRuleCall_3_0 = (RuleCall)cDefinitionAssignment_3.eContents().get(0);
		
		//Function:
		//	'function' name=ID ':' definition=Definition;
		@Override public ParserRule getRule() { return rule; }
		
		//'function' name=ID ':' definition=Definition
		public Group getGroup() { return cGroup; }
		
		//'function'
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//definition=Definition
		public Assignment getDefinitionAssignment_3() { return cDefinitionAssignment_3; }
		
		//Definition
		public RuleCall getDefinitionDefinitionParserRuleCall_3_0() { return cDefinitionDefinitionParserRuleCall_3_0; }
	}
	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.whpp.mydsl.Wh.Definition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cReadKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cInputAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cInputInputParserRuleCall_0_1_0 = (RuleCall)cInputAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cPercentSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cCommandsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCommandsCommandsParserRuleCall_1_1_0 = (RuleCall)cCommandsAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cPercentSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cWriteKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cOutputAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cOutputOutputParserRuleCall_2_2_0 = (RuleCall)cOutputAssignment_2_2.eContents().get(0);
		
		//Definition:
		//	('read' input=Input) ('%' commands=Commands) ('%' 'write' output=Output);
		@Override public ParserRule getRule() { return rule; }
		
		//('read' input=Input) ('%' commands=Commands) ('%' 'write' output=Output)
		public Group getGroup() { return cGroup; }
		
		//'read' input=Input
		public Group getGroup_0() { return cGroup_0; }
		
		//'read'
		public Keyword getReadKeyword_0_0() { return cReadKeyword_0_0; }
		
		//input=Input
		public Assignment getInputAssignment_0_1() { return cInputAssignment_0_1; }
		
		//Input
		public RuleCall getInputInputParserRuleCall_0_1_0() { return cInputInputParserRuleCall_0_1_0; }
		
		//'%' commands=Commands
		public Group getGroup_1() { return cGroup_1; }
		
		//'%'
		public Keyword getPercentSignKeyword_1_0() { return cPercentSignKeyword_1_0; }
		
		//commands=Commands
		public Assignment getCommandsAssignment_1_1() { return cCommandsAssignment_1_1; }
		
		//Commands
		public RuleCall getCommandsCommandsParserRuleCall_1_1_0() { return cCommandsCommandsParserRuleCall_1_1_0; }
		
		//'%' 'write' output=Output
		public Group getGroup_2() { return cGroup_2; }
		
		//'%'
		public Keyword getPercentSignKeyword_2_0() { return cPercentSignKeyword_2_0; }
		
		//'write'
		public Keyword getWriteKeyword_2_1() { return cWriteKeyword_2_1; }
		
		//output=Output
		public Assignment getOutputAssignment_2_2() { return cOutputAssignment_2_2; }
		
		//Output
		public RuleCall getOutputOutputParserRuleCall_2_2_0() { return cOutputOutputParserRuleCall_2_2_0; }
	}
	public class InputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.whpp.mydsl.Wh.Input");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cVariableAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cVariableVariableParserRuleCall_0_0_0 = (RuleCall)cVariableAssignment_0_0.eContents().get(0);
		private final Keyword cCommaKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cInputAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cInputInputParserRuleCall_0_2_0 = (RuleCall)cInputAssignment_0_2.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cVariableVariableParserRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		
		//Input:
		//	variable=Variable ',' input=Input | variable=Variable;
		@Override public ParserRule getRule() { return rule; }
		
		//variable=Variable ',' input=Input | variable=Variable
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//variable=Variable ',' input=Input
		public Group getGroup_0() { return cGroup_0; }
		
		//variable=Variable
		public Assignment getVariableAssignment_0_0() { return cVariableAssignment_0_0; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_0_0_0() { return cVariableVariableParserRuleCall_0_0_0; }
		
		//','
		public Keyword getCommaKeyword_0_1() { return cCommaKeyword_0_1; }
		
		//input=Input
		public Assignment getInputAssignment_0_2() { return cInputAssignment_0_2; }
		
		//Input
		public RuleCall getInputInputParserRuleCall_0_2_0() { return cInputInputParserRuleCall_0_2_0; }
		
		//variable=Variable
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_1_0() { return cVariableVariableParserRuleCall_1_0; }
	}
	public class OutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.whpp.mydsl.Wh.Output");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cVariableAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cVariableVariableParserRuleCall_0_0_0 = (RuleCall)cVariableAssignment_0_0.eContents().get(0);
		private final Keyword cCommaKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cOutputAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cOutputOutputParserRuleCall_0_2_0 = (RuleCall)cOutputAssignment_0_2.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cVariableVariableParserRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		
		//Output:
		//	variable=Variable ',' output=Output | variable=Variable;
		@Override public ParserRule getRule() { return rule; }
		
		//variable=Variable ',' output=Output | variable=Variable
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//variable=Variable ',' output=Output
		public Group getGroup_0() { return cGroup_0; }
		
		//variable=Variable
		public Assignment getVariableAssignment_0_0() { return cVariableAssignment_0_0; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_0_0_0() { return cVariableVariableParserRuleCall_0_0_0; }
		
		//','
		public Keyword getCommaKeyword_0_1() { return cCommaKeyword_0_1; }
		
		//output=Output
		public Assignment getOutputAssignment_0_2() { return cOutputAssignment_0_2; }
		
		//Output
		public RuleCall getOutputOutputParserRuleCall_0_2_0() { return cOutputOutputParserRuleCall_0_2_0; }
		
		//variable=Variable
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_1_0() { return cVariableVariableParserRuleCall_1_0; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.whpp.mydsl.Wh.Variable");
		private final RuleCall cMAJUSCULETerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Variable:
		//	MAJUSCULE // base
		//	// confort
		//	//(MAJUSCULE | MINUSCULE | DIGIT)* 
		//	//(('-' | '+' | '.' | '/' | '_' | '&' | '->') (MAJUSCULE | MINUSCULE | DIGIT)+)* ('?'|'!')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//MAJUSCULE
		public RuleCall getMAJUSCULETerminalRuleCall() { return cMAJUSCULETerminalRuleCall; }
	}
	public class CommandsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.whpp.mydsl.Wh.Commands");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cCommandAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cCommandCommandParserRuleCall_0_0_0 = (RuleCall)cCommandAssignment_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cCommandsAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cCommandsCommandsParserRuleCall_0_2_0 = (RuleCall)cCommandsAssignment_0_2.eContents().get(0);
		private final Assignment cCommandAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cCommandCommandParserRuleCall_1_0 = (RuleCall)cCommandAssignment_1.eContents().get(0);
		
		//Commands:
		//	command=Command ';' commands=Commands | command=Command;
		@Override public ParserRule getRule() { return rule; }
		
		//command=Command ';' commands=Commands | command=Command
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//command=Command ';' commands=Commands
		public Group getGroup_0() { return cGroup_0; }
		
		//command=Command
		public Assignment getCommandAssignment_0_0() { return cCommandAssignment_0_0; }
		
		//Command
		public RuleCall getCommandCommandParserRuleCall_0_0_0() { return cCommandCommandParserRuleCall_0_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_0_1() { return cSemicolonKeyword_0_1; }
		
		//commands=Commands
		public Assignment getCommandsAssignment_0_2() { return cCommandsAssignment_0_2; }
		
		//Commands
		public RuleCall getCommandsCommandsParserRuleCall_0_2_0() { return cCommandsCommandsParserRuleCall_0_2_0; }
		
		//command=Command
		public Assignment getCommandAssignment_1() { return cCommandAssignment_1; }
		
		//Command
		public RuleCall getCommandCommandParserRuleCall_1_0() { return cCommandCommandParserRuleCall_1_0; }
	}
	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.whpp.mydsl.Wh.Command");
		private final Keyword cNopKeyword = (Keyword)rule.eContents().get(1);
		
		//Command:
		//	'nop';
		@Override public ParserRule getRule() { return rule; }
		
		//'nop'
		public Keyword getNopKeyword() { return cNopKeyword; }
	}
	
	
	private final ModelElements pModel;
	private final ProgramElements pProgram;
	private final FunctionElements pFunction;
	private final DefinitionElements pDefinition;
	private final InputElements pInput;
	private final OutputElements pOutput;
	private final VariableElements pVariable;
	private final CommandsElements pCommands;
	private final CommandElements pCommand;
	private final TerminalRule tMAJUSCULE;
	private final TerminalRule tMINUSCULE;
	private final TerminalRule tDIGIT;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public WhGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pProgram = new ProgramElements();
		this.pFunction = new FunctionElements();
		this.pDefinition = new DefinitionElements();
		this.pInput = new InputElements();
		this.pOutput = new OutputElements();
		this.pVariable = new VariableElements();
		this.pCommands = new CommandsElements();
		this.pCommand = new CommandElements();
		this.tMAJUSCULE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.whpp.mydsl.Wh.MAJUSCULE");
		this.tMINUSCULE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.whpp.mydsl.Wh.MINUSCULE");
		this.tDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.whpp.mydsl.Wh.DIGIT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.whpp.mydsl.Wh".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	program+=Program;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Program:
	//	function=Function '
	//'+ program=Program?;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Function:
	//	'function' name=ID ':' definition=Definition;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//Definition:
	//	('read' input=Input) ('%' commands=Commands) ('%' 'write' output=Output);
	public DefinitionElements getDefinitionAccess() {
		return pDefinition;
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}
	
	//Input:
	//	variable=Variable ',' input=Input | variable=Variable;
	public InputElements getInputAccess() {
		return pInput;
	}
	
	public ParserRule getInputRule() {
		return getInputAccess().getRule();
	}
	
	//Output:
	//	variable=Variable ',' output=Output | variable=Variable;
	public OutputElements getOutputAccess() {
		return pOutput;
	}
	
	public ParserRule getOutputRule() {
		return getOutputAccess().getRule();
	}
	
	//Variable:
	//	MAJUSCULE // base
	//	// confort
	//	//(MAJUSCULE | MINUSCULE | DIGIT)* 
	//	//(('-' | '+' | '.' | '/' | '_' | '&' | '->') (MAJUSCULE | MINUSCULE | DIGIT)+)* ('?'|'!')
	//;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//Commands:
	//	command=Command ';' commands=Commands | command=Command;
	public CommandsElements getCommandsAccess() {
		return pCommands;
	}
	
	public ParserRule getCommandsRule() {
		return getCommandsAccess().getRule();
	}
	
	//Command:
	//	'nop';
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}
	
	//terminal MAJUSCULE:
	//	'A'..'Z';
	public TerminalRule getMAJUSCULERule() {
		return tMAJUSCULE;
	}
	
	//terminal MINUSCULE:
	//	'a'..'z';
	public TerminalRule getMINUSCULERule() {
		return tMINUSCULE;
	}
	
	//terminal DIGIT:
	//	'0'..'9';
	public TerminalRule getDIGITRule() {
		return tDIGIT;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
