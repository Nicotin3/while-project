/**
 * generated by Xtext 2.12.0
 */
package org.xtext.whpp.mydsl.wh.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.whpp.mydsl.wh.Exprand;
import org.xtext.whpp.mydsl.wh.Expror;
import org.xtext.whpp.mydsl.wh.WhPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Exprand</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.whpp.mydsl.wh.impl.ExprandImpl#getExprG <em>Expr G</em>}</li>
 *   <li>{@link org.xtext.whpp.mydsl.wh.impl.ExprandImpl#getExpr <em>Expr</em>}</li>
 *   <li>{@link org.xtext.whpp.mydsl.wh.impl.ExprandImpl#getExprD <em>Expr D</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExprandImpl extends MinimalEObjectImpl.Container implements Exprand
{
  /**
   * The cached value of the '{@link #getExprG() <em>Expr G</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExprG()
   * @generated
   * @ordered
   */
  protected Expror exprG;

  /**
   * The default value of the '{@link #getExpr() <em>Expr</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpr()
   * @generated
   * @ordered
   */
  protected static final String EXPR_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getExpr() <em>Expr</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpr()
   * @generated
   * @ordered
   */
  protected String expr = EXPR_EDEFAULT;

  /**
   * The cached value of the '{@link #getExprD() <em>Expr D</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExprD()
   * @generated
   * @ordered
   */
  protected Exprand exprD;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExprandImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return WhPackage.Literals.EXPRAND;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expror getExprG()
  {
    return exprG;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExprG(Expror newExprG, NotificationChain msgs)
  {
    Expror oldExprG = exprG;
    exprG = newExprG;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, WhPackage.EXPRAND__EXPR_G, oldExprG, newExprG);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setExprG(Expror newExprG)
  {
    if (newExprG != exprG)
    {
      NotificationChain msgs = null;
      if (exprG != null)
        msgs = ((InternalEObject)exprG).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - WhPackage.EXPRAND__EXPR_G, null, msgs);
      if (newExprG != null)
        msgs = ((InternalEObject)newExprG).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - WhPackage.EXPRAND__EXPR_G, null, msgs);
      msgs = basicSetExprG(newExprG, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WhPackage.EXPRAND__EXPR_G, newExprG, newExprG));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getExpr()
  {
    return expr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setExpr(String newExpr)
  {
    String oldExpr = expr;
    expr = newExpr;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WhPackage.EXPRAND__EXPR, oldExpr, expr));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Exprand getExprD()
  {
    return exprD;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExprD(Exprand newExprD, NotificationChain msgs)
  {
    Exprand oldExprD = exprD;
    exprD = newExprD;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, WhPackage.EXPRAND__EXPR_D, oldExprD, newExprD);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setExprD(Exprand newExprD)
  {
    if (newExprD != exprD)
    {
      NotificationChain msgs = null;
      if (exprD != null)
        msgs = ((InternalEObject)exprD).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - WhPackage.EXPRAND__EXPR_D, null, msgs);
      if (newExprD != null)
        msgs = ((InternalEObject)newExprD).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - WhPackage.EXPRAND__EXPR_D, null, msgs);
      msgs = basicSetExprD(newExprD, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WhPackage.EXPRAND__EXPR_D, newExprD, newExprD));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case WhPackage.EXPRAND__EXPR_G:
        return basicSetExprG(null, msgs);
      case WhPackage.EXPRAND__EXPR_D:
        return basicSetExprD(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case WhPackage.EXPRAND__EXPR_G:
        return getExprG();
      case WhPackage.EXPRAND__EXPR:
        return getExpr();
      case WhPackage.EXPRAND__EXPR_D:
        return getExprD();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case WhPackage.EXPRAND__EXPR_G:
        setExprG((Expror)newValue);
        return;
      case WhPackage.EXPRAND__EXPR:
        setExpr((String)newValue);
        return;
      case WhPackage.EXPRAND__EXPR_D:
        setExprD((Exprand)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case WhPackage.EXPRAND__EXPR_G:
        setExprG((Expror)null);
        return;
      case WhPackage.EXPRAND__EXPR:
        setExpr(EXPR_EDEFAULT);
        return;
      case WhPackage.EXPRAND__EXPR_D:
        setExprD((Exprand)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case WhPackage.EXPRAND__EXPR_G:
        return exprG != null;
      case WhPackage.EXPRAND__EXPR:
        return EXPR_EDEFAULT == null ? expr != null : !EXPR_EDEFAULT.equals(expr);
      case WhPackage.EXPRAND__EXPR_D:
        return exprD != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (expr: ");
    result.append(expr);
    result.append(')');
    return result.toString();
  }

} //ExprandImpl
